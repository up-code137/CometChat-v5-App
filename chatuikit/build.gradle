plugins {
    alias(libs.plugins.android.library)
    id 'maven-publish'
}

android {
    namespace 'com.cometchat.chatuikit'
    compileSdk 34

    defaultConfig {
        minSdk 24
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        renderscriptSupportModeEnabled true

        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }

        buildConfigField 'String', 'VERSION_NAME', "\"${defaultConfig.versionName}\""
        buildConfigField 'int', 'VERSION_CODE', "${defaultConfig.versionCode}"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', '.apt_generated']
            aidl.srcDirs = ['src/main/aidl', '.apt_generated']
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res-components',
                    'src/main/res-components/calls',
                    'src/main/res-components/chats',
                    'src/main/res-components/cometchatui',
                    'src/main/res-components/groups',
                    'src/main/res-components/messagebubbles',
                    'src/main/res-components/messages',
                    'src/main/res-components/others',
                    'src/main/res-components/shared',
                    'src/main/res-components/userprofile',
                    'src/main/res-components/users'
            ]
        }
    }

    android.libraryVariants.configureEach { variant ->
        if (variant.buildType.name == 'distributable') {
            if (variant.mappingFile != null) {
                tasks.register(name: "copyDistributableAarProguardMapping", type: Copy) {
                    group "distribution"
                    from variant.mappingFile.path
                    rename '.*', "proguard_mapping.txt"
                    into rootDir
                }
                bundleDistributableAar.finalizedBy copyDistributableAarProguardMapping
            }
        }
        variant.outputs.all {
            outputFileName = "chat-uikit-android.aar"
        }
    }

    dataBinding {
        enabled = true
    }

    viewBinding {
        enabled = true
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ObsoleteSdkInt', 'NotifyDataSetChanged', 'ExtraTranslation', 'VectorPath', 'CustomViewStyleable', 'unused', 'AutoCloseable'
    }

    buildFeatures {
        buildConfig true
    }
}

publishing {
    repositories {
        maven {
            url = "$projectDir/distribution"
        }
    }

    publications {
        maven(MavenPublication) {
            groupId 'com.cometchat'
            artifactId 'chat-uikit-android'
            version "${project.android.defaultConfig.versionName}"
            artifact "$buildDir/outputs/aar/chat-uikit-android.aar"

            pom.withXml {
                def node = asNode()

                ((NodeList) node.get('packaging')).get(0).value = 'aar'

                def dependenciesNode = node.appendNode('dependencies')

                def cl = { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all dependencies and write to POM
                configurations.api.getAllDependencies().each cl
                configurations.implementation.getAllDependencies().each cl
            }
        }
    }
}

dependencies {
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout

    //Test Dependencies
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

    //Glide Dependency
    implementation libs.glide
    annotationProcessor libs.compiler

    //Other Dependencies
    implementation libs.flexbox
    implementation libs.gson
    implementation libs.recyclerview
    implementation libs.lottie

    //CometChat Dependency
    implementation libs.chat.sdk.android
    compileOnly libs.calls.sdk.android
}
